# Copyright (c) 2023 SolarWinds, LLC.
# All rights reserved.

name: Build and publish ruby lambda layer

on:
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  # build layer on arm64 and amd64, then upload to artifacts
  # act -j build_layer --container-architecture linux/arm64 --secret-file act.secrets
  build_layer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2

      # Build inside Docker containers
      # There is only two ruby runtime for aws lambda ruby 3.2 and 2.7
      # Since the 2.7 is not supported by otel, then we don't use it
      # BuildArchitecture: arch is for different architecture build
      - name: build lambda layer
        run: |
          cd lambda/
          echo "" >> template.yml
          echo "      BuildArchitecture: ${{ matrix.arch }}" >> template.yml
          echo "" >> template.yml
          sam build -u -t template.yml -e BUNDLE_RUBYGEMS__PKG__GITHUB__COM=$GITHUB_RUBY_TOKEN
          ./zip_layer.sh -n ruby-layer-${{ matrix.arch }}
        env:
          GITHUB_RUBY_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to artifact
        uses: actions/upload-artifact@v3
        name: Save assembled layer to build
        with:
          name: ruby-layer-${{ matrix.arch }}.zip
          path: lambda

  # extract the built layer from artifacts, then publish it based on region
  publish_layer:
    needs:
      - build_layer
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        aws_region: 
          - us-east-1
        arch:
          - x86_64
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.STAGING_LAMBDA_PUSH_ARN }}
          aws-region: ${{ env.aws_region }}

      - name: extract layer zip from artifacts
        uses: actions/download-artifact@v3
        with:
          name: ruby-layer-${{ matrix.arch }}.zip
          path: lambda

      - name: publish lambda layer
        run: |
          cd lambda/
          aws lambda publish-layer-version \
            --layer-name solarwinds-ruby-layer-${{ matrix.arch }} \
            --license-info "Apache 2.0" \
            --compatible-architectures ${{ matrix.arch }} \
            --compatible-runtimes ruby3.2 \
            --zip-file ruby-layer-${{ matrix.arch }}.zip \
            --query 'LayerVersionArn' \
            --compatible-architectures ${{ matrix.arch }} \
            --output text

      - name: grant permissions to public for the published layer
        run: |
          layer_name=solarwinds-ruby-layer-${{ matrix.arch }}
          latest_version=$(aws lambda list-layer-versions --layer-name $layer_name | jq -r '.LayerVersions | max_by(.Version) | .Version')
          aws lambda add-layer-version-permission \
            --layer-name $layer_name \
            --statement-id ............ \
            --action lambda:GetLayerVersion \
            --principal '*' \
            --version-number $latest_version \
            --output text
